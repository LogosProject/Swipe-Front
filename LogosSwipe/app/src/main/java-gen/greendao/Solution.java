package greendao;

import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SOLUTION.
 */
public class Solution {

    private Long id;
    private String name;
    private String description;
    private Long problemId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SolutionDao myDao;

    private Problem problem;
    private Long problem__resolvedKey;


    public Solution() {
    }

    public Solution(Long id) {
        this.id = id;
    }

    public Solution(Long id, String name, String description, Long problemId) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.problemId = problemId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSolutionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Long getProblemId() {
        return problemId;
    }

    public void setProblemId(Long problemId) {
        this.problemId = problemId;
    }

    /** To-one relationship, resolved on first access. */
    public Problem getProblem() {
        Long __key = this.problemId;
        if (problem__resolvedKey == null || !problem__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProblemDao targetDao = daoSession.getProblemDao();
            Problem problemNew = targetDao.load(__key);
            synchronized (this) {
                problem = problemNew;
            	problem__resolvedKey = __key;
            }
        }
        return problem;
    }

    public void setProblem(Problem problem) {
        synchronized (this) {
            this.problem = problem;
            problemId = problem == null ? null : problem.getId();
            problem__resolvedKey = problemId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
