package greendao;

import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table COMMENT.
 */
public class Comment {

    private Long id;
    private String name;
    private java.util.Date datetime;
    private String content;
    private Long commentId;
    private Long versusId;
    private Long userId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CommentDao myDao;

    private Comment comment;
    private Long comment__resolvedKey;

    private Versus versus;
    private Long versus__resolvedKey;

    private User user;
    private Long user__resolvedKey;


    public Comment() {
    }

    public Comment(Long id) {
        this.id = id;
    }

    public Comment(Long id, String name, java.util.Date datetime, String content, Long commentId, Long versusId, Long userId) {
        this.id = id;
        this.name = name;
        this.datetime = datetime;
        this.content = content;
        this.commentId = commentId;
        this.versusId = versusId;
        this.userId = userId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCommentDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public java.util.Date getDatetime() {
        return datetime;
    }

    public void setDatetime(java.util.Date datetime) {
        this.datetime = datetime;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public Long getCommentId() {
        return commentId;
    }

    public void setCommentId(Long commentId) {
        this.commentId = commentId;
    }

    public Long getVersusId() {
        return versusId;
    }

    public void setVersusId(Long versusId) {
        this.versusId = versusId;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    /** To-one relationship, resolved on first access. */
    public Comment getComment() {
        Long __key = this.commentId;
        if (comment__resolvedKey == null || !comment__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CommentDao targetDao = daoSession.getCommentDao();
            Comment commentNew = targetDao.load(__key);
            synchronized (this) {
                comment = commentNew;
            	comment__resolvedKey = __key;
            }
        }
        return comment;
    }

    public void setComment(Comment comment) {
        synchronized (this) {
            this.comment = comment;
            commentId = comment == null ? null : comment.getId();
            comment__resolvedKey = commentId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Versus getVersus() {
        Long __key = this.versusId;
        if (versus__resolvedKey == null || !versus__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VersusDao targetDao = daoSession.getVersusDao();
            Versus versusNew = targetDao.load(__key);
            synchronized (this) {
                versus = versusNew;
            	versus__resolvedKey = __key;
            }
        }
        return versus;
    }

    public void setVersus(Versus versus) {
        synchronized (this) {
            this.versus = versus;
            versusId = versus == null ? null : versus.getId();
            versus__resolvedKey = versusId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        Long __key = this.userId;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            userId = user == null ? null : user.getId();
            user__resolvedKey = userId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
